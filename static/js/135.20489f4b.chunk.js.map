{"version":3,"file":"static/js/135.20489f4b.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies-search/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"MovieDetails_button__uXZxd\",\"movieContainer\":\"MovieDetails_movieContainer__ilr3m\",\"poster\":\"MovieDetails_poster__yO7gD\",\"title\":\"MovieDetails_title__cUGs9\",\"sectionTitle\":\"MovieDetails_sectionTitle__lgzGU\",\"additionalContainer\":\"MovieDetails_additionalContainer__YQYEX\",\"navLink\":\"MovieDetails_navLink__uPVwm\",\"active\":\"MovieDetails_active__uPNdW\"};","import { useState, useEffect, Suspense, lazy } from 'react';\nimport {\n  NavLink,\n  Routes,\n  Route,\n  useParams,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\n\nimport { UserAPI } from '../../services/api';\nimport s from './MovieDetails.module.css';\n\nconst LazyCast = lazy(() => import('../../components/Cast/Cast'));\nconst LazyReviews = lazy(() => import('../../components/Reviews/Reviews'));\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!movieId) return;\n    fetchMovieById();\n    // eslint-disable-next-line\n  }, [movieId]);\n\n  async function fetchMovieById() {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const movieResponse = await UserAPI.fetchMovieById(movieId);\n\n      if (movieResponse.ok) {\n        const movie = await movieResponse.json();\n\n        setMovie(movie);\n        return;\n      }\n\n      await Promise.reject(new Error(`Movie is not found`));\n      return;\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function getGenres() {\n    if (!movie) return;\n    return movie.genres.map(genre => genre.name).join(', ');\n  }\n  function getScore() {\n    if (!movie) return;\n    const score = Math.round(movie.vote_average * 10);\n    return score;\n  }\n\n  function onBtnClick() {\n    if (location.state) {\n      navigate(location.state.from);\n      return;\n    }\n\n    navigate('/');\n  }\n\n  const showMovie = !isLoading && movie;\n\n  return (\n    <div>\n      <button type=\"button\" onClick={onBtnClick} className={s.button}>\n        Go back\n      </button>\n      {error && <div>Error: {error}</div>}\n      {isLoading && <div>Loading...</div>}\n      {showMovie && (\n        <div>\n          <div className={s.movieContainer}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n              alt=\"movie poster\"\n              className={s.poster}\n            />\n            <div>\n              <section>\n                <h1 className={s.title}>\n                  {' '}\n                  {movie.title ? movie.title : movie.name}\n                </h1>\n                <p>User Score: {getScore()}%</p>\n              </section>\n              <section>\n                <h2 className={s.sectionTitle}>Overview</h2>\n                <p>{movie.overview}</p>\n              </section>\n              <section>\n                <h2 className={s.sectionTitle}>Genres</h2>\n                <p>{getGenres()}</p>\n              </section>\n            </div>\n          </div>\n          <section>\n            <div className={s.additionalContainer}>\n              <h2 className={s.sectionTitle}>Additional information</h2>\n              <NavLink\n                to=\"cast\"\n                state={{ from: location.state.from }}\n                className={s.navLink}\n              >\n                Cast\n              </NavLink>\n              <NavLink\n                to=\"reviews\"\n                state={{ from: location.state.from }}\n                className={s.navLink}\n              >\n                Reviews\n              </NavLink>\n            </div>\n            <Suspense fallback={<div>Loading...</div>}>\n              <Routes>\n                <Route path=\"cast\" element={<LazyCast />} />\n                <Route path=\"reviews\" element={<LazyReviews />} />\n              </Routes>\n            </Suspense>\n          </section>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","const API_KEY = 'dddf682d6a330b3ee1156a5db67c7481';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const UserAPI = {\n  fetchTrends: async () => {\n    const url = `${BASE_URL}/trending/all/week?api_key=${API_KEY}`;\n    const response = await fetch(`${url}`);\n    return response;\n  },\n  fetchMovies: async searchQuery => {\n    const requestName = searchQuery.split(' ').join('+');\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${requestName}&language=en-US&page=1&include_adult=false`;\n    const response = await fetch(`${url}`);\n    return response;\n  },\n  fetchMovieById: async id => {\n    const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n    const response = await fetch(`${url}`);\n    return response;\n  },\n  fetchMovieCast: async id => {\n    const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n    const response = await fetch(`${url}`);\n    return response;\n  },\n  fetchMovieReviews: async id => {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n    const response = await fetch(`${url}`);\n    return response;\n  },\n};\n"],"names":["LazyCast","lazy","LazyReviews","useState","movie","setMovie","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","navigate","useNavigate","UserAPI","movieResponse","ok","json","Promise","reject","Error","console","log","message","useEffect","fetchMovieById","showMovie","type","onClick","state","from","className","s","src","poster_path","alt","title","name","Math","round","vote_average","getScore","overview","genres","map","genre","join","getGenres","to","Suspense","fallback","path","element","API_KEY","BASE_URL","fetchTrends","url","fetch","response","fetchMovies","searchQuery","requestName","split","id","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}